<% unless authenticated? %>
  <%= link_to "Log in", new_session_path %>
<% end %>

<div style="max-width: 1200px; margin: 0 auto; padding: 20px;">
  <% if authenticated? %>

    <!-- New Task Button Section -->
    <div style="margin-bottom: 30px; text-align: center;">
      <%= link_to "‚ú® New Task", new_task_path, 
          class: "btn btn-success",
          style: "display: inline-block; background: linear-gradient(135deg, #28a745 0%, #20c997 100%); color: white; text-decoration: none; padding: 12px 24px; border-radius: 8px; font-size: 16px; font-weight: 600; box-shadow: 0 2px 4px rgba(40, 167, 69, 0.3); transition: all 0.2s ease; border: none;",
          onmouseover: "this.style.background='linear-gradient(135deg, #218838 0%, #1e7e34 100%)'; this.style.transform='translateY(-1px)'; this.style.boxShadow='0 4px 8px rgba(40, 167, 69, 0.4)';",
          onmouseout: "this.style.background='linear-gradient(135deg, #28a745 0%, #20c997 100%)'; this.style.transform='translateY(0)'; this.style.boxShadow='0 2px 4px rgba(40, 167, 69, 0.3)';" %>
    </div>

    <!-- TaskList Microfrontend Container -->
    <div id="tasklist-mfe-container" >
      <div style="text-align: center; color: #666; padding: 40px;">
        <!-- MFE Container -->
      </div>
    </div>

    <!-- Make tasks and users data available globally for the microfrontend -->
    <script>
  // Make data available globally for the external MFE
  <% end %>
</div>

function refreshDebugInfo() {
  const debugEl = document.getElementById('mfe-debug-info');
  if (!debugEl) return;
  
  const info = {
    timestamp: new Date().toLocaleTimeString(),
    containerExists: !!document.getElementById('tasklist-mfe-container'),
    containerContent: document.getElementById('tasklist-mfe-container')?.innerHTML?.substring(0, 100) || 'N/A',
    windowGlobals: {
      React: typeof window.React,
      ReactDOM: typeof window.ReactDOM,
      tasklistMfe: typeof window.tasklistMfe,
      miniSPA: typeof window.miniSPA
    },
    mfeScript: !!document.getElementById('tasklist-mfe-script'),
    networkCheck: 'Checking...'
  };
  
  // Test network connectivity
  fetch('http://localhost:8081/tasklist-mfe.js', { method: 'HEAD' })
    .then(response => {
      info.networkCheck = `‚úÖ Accessible (${response.status})`;
      updateDebugDisplay();
    })
    .catch(error => {
      info.networkCheck = `‚ùå Failed: ${error.message}`;
      updateDebugDisplay();
    });
  
  function updateDebugDisplay() {
    debugEl.innerHTML = `
      <div><strong>Timestamp:</strong> ${info.timestamp}</div>
      <div><strong>Container Exists:</strong> ${info.containerExists}</div>
      <div><strong>Container Content:</strong> ${info.containerContent}</div>
      <div><strong>MFE Script Loaded:</strong> ${info.mfeScript}</div>
      <div><strong>Network Check:</strong> ${info.networkCheck}</div>
      <div><strong>Window.React:</strong> ${info.windowGlobals.React}</div>
      <div><strong>Window.ReactDOM:</strong> ${info.windowGlobals.ReactDOM}</div>
      <div><strong>Window.tasklistMfe:</strong> ${info.windowGlobals.tasklistMfe}</div>
      <div><strong>Window.miniSPA:</strong> ${info.windowGlobals.miniSPA}</div>
      ${window.tasklistMfe ? `<div><strong>MFE Methods:</strong> ${Object.keys(window.tasklistMfe).join(', ')}</div>` : ''}
      ${window.miniSPA && window.miniSPA.apps ? `<div><strong>Registered Apps:</strong> ${window.miniSPA.getAppNames ? window.miniSPA.getAppNames().join(', ') : 'N/A'}</div>` : ''}
    `;
  }
  
  updateDebugDisplay();
}

// Auto-refresh every 2 seconds
setInterval(refreshDebugInfo, 2000);
refreshDebugInfo();

// Log any global errors
window.addEventListener('error', function(e) {
  console.error('üî¥ [DEBUG] Global Error:', {
    message: e.message,
    filename: e.filename,
    lineno: e.lineno,
    colno: e.colno,
    error: e.error
  });
});

// Log any unhandled promise rejections
window.addEventListener('unhandledrejection', function(e) {
  console.error('üî¥ [DEBUG] Unhandled Promise Rejection:', {
    reason: e.reason,
    promise: e.promise
  });
});
</script>

<!-- ONE-TIME REFRESH MECHANISM -->
<script>
  (function() {
    console.log('üîß Tasks page refresh mechanism loaded');
    
    // Check if we need to refresh (one-time only)
    const REFRESH_KEY = 'tasks_page_refreshed';
    const REFRESH_TIMESTAMP_KEY = 'tasks_refresh_timestamp';
    const REFRESH_TIMEOUT = 5000; // 5 seconds timeout to prevent infinite loops
    
    // Get current timestamp
    const now = Date.now();
    const lastRefresh = parseInt(sessionStorage.getItem(REFRESH_TIMESTAMP_KEY) || '0');
    const hasRefreshed = sessionStorage.getItem(REFRESH_KEY);
    
    // Check if we should refresh
    const shouldRefresh = !hasRefreshed || (now - lastRefresh > REFRESH_TIMEOUT);
    
    console.log('üîß Refresh check:', {
      shouldRefresh,
      hasRefreshed: !!hasRefreshed,
      timeSinceLastRefresh: now - lastRefresh,
      timeout: REFRESH_TIMEOUT
    });
    
    if (shouldRefresh) {
      console.log('üîÑ Refreshing tasks page to fix MFE state...');
      
      // Set the refresh flag and timestamp
      sessionStorage.setItem(REFRESH_KEY, 'true');
      sessionStorage.setItem(REFRESH_TIMESTAMP_KEY, now.toString());
      
      // Add a small delay to ensure the flags are set
      setTimeout(() => {
        window.location.reload();
      }, 100);
      
      return; // Exit early since we're refreshing
    }
    
    console.log('‚úÖ Tasks page loaded without refresh (already refreshed)');
    
    // Clear the refresh flag after successful load (with delay to prevent race conditions)
    setTimeout(() => {
      sessionStorage.removeItem(REFRESH_KEY);
    }, 2000);
  })();
</script>

<script>
  // Make data available globally for the external MFE
  window.tasklistMfeData = {
    tasks: <%= raw @tasks.to_json %>,
    users: <%= raw @users.to_json %>
  };
  console.log('üîµ Tasks data loaded for external MFE:', window.tasklistMfeData);
  
  // Force re-evaluation of MFEs after data is loaded
  document.addEventListener('DOMContentLoaded', function() {
    setTimeout(function() {
      if (window.miniSPA && window.miniSPA.started) {
        console.log('üîµ Forcing MFE re-evaluation for tasks page');
        window.miniSPA.evaluateApps();
      }
    }, 100);
  });
  
  // Also handle turbo:load events
  document.addEventListener('turbo:load', function() {
    setTimeout(function() {
      if (window.miniSPA && window.miniSPA.started) {
        console.log('üîµ Turbo load: Forcing MFE re-evaluation for tasks page');
        window.miniSPA.evaluateApps();
      }
    }, 150);
  });
</script>
