<% unless authenticated? %>
  <%= link_to "Log in", new_session_path %>
<% end %>

<div style="max-width: 1200px; margin: 0 auto; padding: 20px;">
  <h1 style="text-align: center; color: #333; margin-bottom: 30px;">TaskTracker with Single-SPA</h1>
  
  <% if authenticated? %>
    <div style="background: #f5f5f5; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
      <h2>Welcome, <%= Current.user.email_address %></h2>
      <p>Organization: <%= Current.user.organization&.name || "No organization assigned" %></p>
    </div>

    <!-- New Task Button Section -->
    <div style="margin-bottom: 30px; text-align: center;">
      <%= link_to "‚ú® New Task", new_task_path, 
          class: "btn btn-success",
          style: "display: inline-block; background: linear-gradient(135deg, #28a745 0%, #20c997 100%); color: white; text-decoration: none; padding: 12px 24px; border-radius: 8px; font-size: 16px; font-weight: 600; box-shadow: 0 2px 4px rgba(40, 167, 69, 0.3); transition: all 0.2s ease; border: none;",
          onmouseover: "this.style.background='linear-gradient(135deg, #218838 0%, #1e7e34 100%)'; this.style.transform='translateY(-1px)'; this.style.boxShadow='0 4px 8px rgba(40, 167, 69, 0.4)';",
          onmouseout: "this.style.background='linear-gradient(135deg, #28a745 0%, #20c997 100%)'; this.style.transform='translateY(0)'; this.style.boxShadow='0 2px 4px rgba(40, 167, 69, 0.3)';" %>
    </div>

    <!-- TaskList Microfrontend Container -->
    <div id="tasklist-mfe-container">
      <div style="text-align: center; color: #666; padding: 40px;">
        Loading TaskList Microfrontend...
      </div>
    </div>

    <!-- Make tasks and users data available globally for the microfrontend -->
    <script>
  // Make data available globally for the external MFE
  window.tasklistMfeData = {
    tasks: <%= raw @tasks.to_json %>,
    users: <%= raw @users.to_json %>
  };
  console.log('üîµ Tasks data loaded for external MFE:', window.tasklistMfeData);
</script>

    <!-- Original React TaskList (for comparison) -->
    <div style="margin-top: 30px; padding: 20px; background: #fff; border: 1px solid #ddd; border-radius: 8px;">
      <h3>Original Rails Embedded TaskList (for comparison)</h3>
      <div id="react-task-list"></div>
      
      <script type="module">
        import React from "react"
        import { createRoot } from "react-dom/client"
        import TaskList from "components/TaskList"

        const tasks = <%= raw @tasks.to_json %>
        const users = <%= raw @users.to_json %>  
        const container = document.getElementById('react-task-list')
        
        if (container) {
          const root = createRoot(container)
          root.render(React.createElement(TaskList, { 
            tasks: tasks, 
            users: users    
          }))
        }
      </script>
    </div>
  <% end %>
</div>
<!-- MFE Debug Information -->
<div style="background: #f0f8ff; border: 2px solid #4a90e2; border-radius: 8px; padding: 15px; margin: 20px 0; font-family: monospace; font-size: 12px;">
  <h3 style="margin: 0 0 10px 0; color: #2c5aa0;">üîç MFE Debug Information</h3>
  
  <div id="mfe-debug-info">
    <div><strong>Initial Status:</strong> Checking...</div>
  </div>
  
  <button onclick="refreshDebugInfo()" style="margin-top: 10px; padding: 5px 10px; background: #4a90e2; color: white; border: none; border-radius: 4px; cursor: pointer;">
    Refresh Debug Info
  </button>
</div>

<script>
function refreshDebugInfo() {
  const debugEl = document.getElementById('mfe-debug-info');
  if (!debugEl) return;
  
  const info = {
    timestamp: new Date().toLocaleTimeString(),
    containerExists: !!document.getElementById('tasklist-mfe-container'),
    containerContent: document.getElementById('tasklist-mfe-container')?.innerHTML?.substring(0, 100) || 'N/A',
    windowGlobals: {
      React: typeof window.React,
      ReactDOM: typeof window.ReactDOM,
      tasklistMfe: typeof window.tasklistMfe,
      miniSPA: typeof window.miniSPA
    },
    mfeScript: !!document.getElementById('tasklist-mfe-script'),
    networkCheck: 'Checking...'
  };
  
  // Test network connectivity
  fetch('http://localhost:8081/tasklist-mfe.js', { method: 'HEAD' })
    .then(response => {
      info.networkCheck = `‚úÖ Accessible (${response.status})`;
      updateDebugDisplay();
    })
    .catch(error => {
      info.networkCheck = `‚ùå Failed: ${error.message}`;
      updateDebugDisplay();
    });
  
  function updateDebugDisplay() {
    debugEl.innerHTML = `
      <div><strong>Timestamp:</strong> ${info.timestamp}</div>
      <div><strong>Container Exists:</strong> ${info.containerExists}</div>
      <div><strong>Container Content:</strong> ${info.containerContent}</div>
      <div><strong>MFE Script Loaded:</strong> ${info.mfeScript}</div>
      <div><strong>Network Check:</strong> ${info.networkCheck}</div>
      <div><strong>Window.React:</strong> ${info.windowGlobals.React}</div>
      <div><strong>Window.ReactDOM:</strong> ${info.windowGlobals.ReactDOM}</div>
      <div><strong>Window.tasklistMfe:</strong> ${info.windowGlobals.tasklistMfe}</div>
      <div><strong>Window.miniSPA:</strong> ${info.windowGlobals.miniSPA}</div>
      ${window.tasklistMfe ? `<div><strong>MFE Methods:</strong> ${Object.keys(window.tasklistMfe).join(', ')}</div>` : ''}
      ${window.miniSPA && window.miniSPA.apps ? `<div><strong>Registered Apps:</strong> ${window.miniSPA.getAppNames ? window.miniSPA.getAppNames().join(', ') : 'N/A'}</div>` : ''}
    `;
  }
  
  updateDebugDisplay();
}

// Auto-refresh every 2 seconds
setInterval(refreshDebugInfo, 2000);
refreshDebugInfo();

// Log any global errors
window.addEventListener('error', function(e) {
  console.error('üî¥ [DEBUG] Global Error:', {
    message: e.message,
    filename: e.filename,
    lineno: e.lineno,
    colno: e.colno,
    error: e.error
  });
});

// Log any unhandled promise rejections
window.addEventListener('unhandledrejection', function(e) {
  console.error('üî¥ [DEBUG] Unhandled Promise Rejection:', {
    reason: e.reason,
    promise: e.promise
  });
});
</script>
